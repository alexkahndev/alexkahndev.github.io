/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 plane.glb --types --shadows --transform --keepmaterials 
Files: plane.glb [55.34KB] > /home/alexkahn/alex/portfolio/src/assets/glb/plane-transformed.glb [8.5KB] (85%)
*/

import { Mesh, MeshStandardMaterial } from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { animated } from "@react-spring/three";
import { HomeModelProps } from "../../pages/HomePage";

type GLTFResult = GLTF & {
  nodes: {
    ["Node-Mesh"]: Mesh;
    ["Node-Mesh_1"]: Mesh;
    ["Node-Mesh_2"]: Mesh;
    ["Node-Mesh_3"]: Mesh;
    ["Node-Mesh_4"]: Mesh;
  };
  materials: {
    mat8: MeshStandardMaterial;
    mat17: MeshStandardMaterial;
    mat15: MeshStandardMaterial;
    mat24: MeshStandardMaterial;
    mat16: MeshStandardMaterial;
  };

  // @ts-expect-error: gltfjsx 6.4.1 has error in types
  animations: GLTFAction[];
};

export const PlaneModel = ({
  position,
  rotation,
  scale,
  onPointerEnter,
  onPointerLeave,
  onClick,
}: HomeModelProps) => {
  const radius = 25;

  const { nodes, materials } = useGLTF("/plane-transformed.glb") as GLTFResult;
  return (
    <animated.group
      position={position}
      rotation={rotation}
      scale={scale}
      dispose={null}
      onPointerEnter={onPointerEnter}
      onPointerLeave={onPointerLeave}
      onClick={onClick}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Node-Mesh"].geometry}
        material={materials.mat8}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Node-Mesh_1"].geometry}
        material={materials.mat17}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Node-Mesh_2"].geometry}
        material={materials.mat15}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Node-Mesh_3"].geometry}
        material={materials.mat24}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Node-Mesh_4"].geometry}
        material={materials.mat16}
      />
    </animated.group>
  );
};

useGLTF.preload("/plane-transformed.glb");
